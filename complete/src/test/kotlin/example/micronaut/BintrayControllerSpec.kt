package example.micronaut

import io.micronaut.context.ApplicationContext
import io.micronaut.core.type.Argument
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpStatus
import io.micronaut.http.client.RxStreamingHttpClient
import io.micronaut.runtime.server.EmbeddedServer
import io.reactivex.Flowable
import org.jetbrains.spek.api.Spek
import org.jetbrains.spek.api.dsl.describe
import org.jetbrains.spek.api.dsl.on
import org.junit.jupiter.api.Assertions.*

class BintrayControllerSpec: Spek({
    val expectedProfileNames = arrayOf("base", "federation", "function", "function-aws", "service")
    describe("BintrayController") {

        var embeddedServer : EmbeddedServer = ApplicationContext.run(EmbeddedServer::class.java) // <1>
        var client : RxStreamingHttpClient = RxStreamingHttpClient.create(embeddedServer.url) // <2>
        on("Verify bintray packages can be fetched with low level HttpClient") {
            val request = HttpRequest.GET<Any>("/bintray/packages-lowlevel")
            val rsp = client.toBlocking().exchange(request,   // <3>
                    Argument.of(List::class.java, BintrayPackage::class.java))  // <4>

            assertEquals(rsp.status()!!, HttpStatus.OK) // <5>
            assertNotNull(rsp.body()) // <6>

            for ( bintraypackage in rsp.body() as List<BintrayPackage>) {
                assertTrue(expectedProfileNames.contains(bintraypackage.name))
            }
        }
        on("Verify bintray packages can be fetched with compile-time autogenerated @Client") {
            val request = HttpRequest.GET<Any>("/bintray/packages")
            val bintrayPackageStream : Flowable<BintrayPackage> = client.jsonStream(request, BintrayPackage::class.java)  // <7>
            val bintrayPackages : Iterable<BintrayPackage> = bintrayPackageStream.blockingIterable()

            for ( bintrayPackage in bintrayPackages ) {
                assertTrue(expectedProfileNames.contains(bintrayPackage.name))
            }
        }

        afterGroup {
            client.close()
            embeddedServer.close()
        }

    }
})